// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetDexQL.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace netdexQL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240624000641_type_effectiveness_table")]
    partial class type_effectiveness_table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NetDexQL.Data.Models.MonType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_types");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_types_name");

                    b.ToTable("types", (string)null);
                });

            modelBuilder.Entity("NetDexQL.Data.Models.Pokemon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("BaseExperience")
                        .HasColumnType("integer")
                        .HasColumnName("base_experience");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_pokemon");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_pokemon_name");

                    b.ToTable("pokemon", (string)null);
                });

            modelBuilder.Entity("NetDexQL.Data.Models.PokemonOnType", b =>
                {
                    b.Property<Guid>("MonTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("mon_type_id");

                    b.Property<Guid>("PokemonId")
                        .HasColumnType("uuid")
                        .HasColumnName("pokemon_id");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.HasKey("MonTypeId", "PokemonId")
                        .HasName("pk_pokemon_on_types");

                    b.HasIndex("PokemonId")
                        .HasDatabaseName("ix_pokemon_on_types_pokemon_id");

                    b.ToTable("pokemon_on_types", (string)null);
                });

            modelBuilder.Entity("NetDexQL.Data.Models.TypeEffectiveness", b =>
                {
                    b.Property<Guid>("AttackingTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("attacking_type_id");

                    b.Property<Guid>("DefendingTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("defending_type_id");

                    b.Property<double>("Multiplier")
                        .HasColumnType("double precision")
                        .HasColumnName("multiplier");

                    b.HasKey("AttackingTypeId", "DefendingTypeId")
                        .HasName("pk_type_effectivenesses");

                    b.HasIndex("DefendingTypeId")
                        .HasDatabaseName("ix_type_effectivenesses_defending_type_id");

                    b.ToTable("type_effectivenesses", (string)null);
                });

            modelBuilder.Entity("NetDexQL.Data.Models.PokemonOnType", b =>
                {
                    b.HasOne("NetDexQL.Data.Models.MonType", null)
                        .WithMany("PokemonTypes")
                        .HasForeignKey("MonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pokemon_on_types_types_mon_type_id");

                    b.HasOne("NetDexQL.Data.Models.Pokemon", null)
                        .WithMany("PokemonTypes")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pokemon_on_types_pokemon_pokemon_id");
                });

            modelBuilder.Entity("NetDexQL.Data.Models.TypeEffectiveness", b =>
                {
                    b.HasOne("NetDexQL.Data.Models.MonType", "AttackingType")
                        .WithMany("AttackingTypeEffectivenesses")
                        .HasForeignKey("AttackingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_type_effectivenesses_types_attacking_type_id");

                    b.HasOne("NetDexQL.Data.Models.MonType", "DefendingType")
                        .WithMany("DefendingTypeEffectivenesses")
                        .HasForeignKey("DefendingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_type_effectivenesses_types_defending_type_id");

                    b.Navigation("AttackingType");

                    b.Navigation("DefendingType");
                });

            modelBuilder.Entity("NetDexQL.Data.Models.MonType", b =>
                {
                    b.Navigation("AttackingTypeEffectivenesses");

                    b.Navigation("DefendingTypeEffectivenesses");

                    b.Navigation("PokemonTypes");
                });

            modelBuilder.Entity("NetDexQL.Data.Models.Pokemon", b =>
                {
                    b.Navigation("PokemonTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
